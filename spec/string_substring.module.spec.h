#ifndef __EMERALDS_STRING_SUBSTRING_MODULE_SPEC_H_
#define __EMERALDS_STRING_SUBSTRING_MODULE_SPEC_H_

#include "../libs/cSpec/export/cSpec.h"
#include "../src/EmeraldsString.h"

module(T_string_substring, {
  describe("string substring", {
    it("returns a null string when given a null string", {
      char *str = NULL;
      char *sub = string_substring(str, 0, 0);
      assert_that(str is NULL);
      assert_that(sub is NULL);
    });

    it("returns an empty string when given an empty string", {
      char *str = string_new("");
      char *sub = string_substring(str, 0, 0);
      assert_that(str isnot NULL);
      assert_that(sub isnot NULL);
      assert_that_charptr(str equals to "");
      assert_that_charptr(sub equals to "");
      char *sub1 = string_substring(str, 0, 1);
      assert_that_charptr(sub1 equals to "");
      char *sub2 = string_substring(str, 3, 6);
      assert_that_charptr(sub2 equals to "");
      char *sub3 = string_substring(str, 6, 3);
      assert_that_charptr(sub3 equals to "");
      string_free(str);
      string_free(sub);
      string_free(sub1);
      string_free(sub2);
      string_free(sub3);
    });

    it("returns an empty string when getting sub of similar position", {
      char *str  = string_new("oblivious");
      char *sub0 = string_substring(str, 0, 0);
      assert_that_charptr(sub0 equals to "");
      char *sub1 = string_substring(str, 1, 1);
      assert_that_charptr(sub1 equals to "");
      char *sub2 = string_substring(str, 2, 2);
      assert_that_charptr(sub2 equals to "");
      char *sub3 = string_substring(str, 3, 3);
      assert_that_charptr(sub3 equals to "");
      char *sub9 = string_substring(str, 9, 9);
      assert_that_charptr(sub9 equals to "");
      char *subx = string_substring(str, 42, 42);
      assert_that_charptr(subx equals to "");
      string_free(str);
      string_free(sub0);
      string_free(sub1);
      string_free(sub2);
      string_free(sub3);
      string_free(sub9);
      string_free(subx);
    });

    it("grabs the first character of a string", {
      char *str  = string_new("oblivious");
      char *sub1 = string_substring(str, 0, 1);
      assert_that_charptr(sub1 equals to "o");
      char *sub2 = string_substring(str, 3, 4);
      assert_that_charptr(sub2 equals to "i");
      string_free(str);
      string_free(sub1);
      string_free(sub2);
    });

    it("grabs multiple characters in a string", {
      char *str  = string_new("oblivious");
      char *sub1 = string_substring(str, 0, 2);
      assert_that_charptr(sub1 equals to "ob");
      char *sub2 = string_substring(str, 3, 6);
      assert_that_charptr(sub2 equals to "ivi");
      string_free(str);
      string_free(sub1);
      string_free(sub2);
    });

    it("returns an emprty string when `from` is greater than `to`", {
      char *str  = string_new("oblivious");
      char *sub1 = string_substring(str, 3, 2);
      assert_that_charptr(sub1 equals to "");
      char *sub2 = string_substring(str, 5, 3);
      assert_that_charptr(sub2 equals to "");
      string_free(str);
      string_free(sub1);
      string_free(sub2);
    });

    context("handles negative numbers", {
      it("shortens the string by the when given a negative `to`", {
        char *str  = string_new("oblivious");
        char *sub1 = string_substring(str, 0, -1);
        assert_that_charptr(sub1 equals to "obliviou");
        char *sub2 = string_substring(str, 0, -2);
        assert_that_charptr(sub2 equals to "oblivio");
        char *sub3 = string_substring(str, 0, -3);
        assert_that_charptr(sub3 equals to "oblivi");
        char *sub4 = string_substring(str, 0, -4);
        assert_that_charptr(sub4 equals to "obliv");
        char *sub5 = string_substring(str, 0, -9);
        assert_that_charptr(sub5 equals to "");
        char *sub6 = string_substring(str, 0, -42);
        assert_that_charptr(sub6 equals to "");
        char *sub7 = string_substring(str, 2, -2);
        assert_that_charptr(sub7 equals to "livio");
        char *sub8 = string_substring(str, 3, -5);
        assert_that_charptr(sub8 equals to "i");
        char *sub9 = string_substring(str, 4, -5);
        assert_that_charptr(sub9 equals to "");
        string_free(str);
        string_free(sub1);
        string_free(sub2);
        string_free(sub3);
        string_free(sub4);
        string_free(sub5);
        string_free(sub6);
        string_free(sub7);
        string_free(sub8);
        string_free(sub9);
      });

      it(
        "skips the first characters by the number of chracters when given a "
        "negative `from`",
        {
          char *str  = string_new("oblivious");
          char *sub1 = string_substring(str, -1, 0);
          assert_that_charptr(sub1 equals to "");
          char *sub2 = string_substring(str, -2, 0);
          assert_that_charptr(sub2 equals to "");
          char *sub3 = string_substring(str, -3, 0);
          assert_that_charptr(sub3 equals to "");
          char *sub4 = string_substring(str, -42, 0);
          assert_that_charptr(sub4 equals to "");
          char *sub5 = string_substring(str, -1, -1);
          assert_that_charptr(sub5 equals to "");
          char *sub6 = string_substring(str, -5, -2);
          assert_that_charptr(sub6 equals to "vio");
          char *sub7 = string_substring(str, -7, 9);
          assert_that_charptr(sub7 equals to "livious");
          string_free(str);
          string_free(sub1);
          string_free(sub2);
          string_free(sub3);
          string_free(sub4);
          string_free(sub5);
          string_free(sub6);
          string_free(sub7);
        }
      );
    });

    it("tests comprehensive cases of potential substrings", {
      char *str    = string_new("oblivious");
      char *substr = string_substring(str, 0, 1);
      assert_that_charptr(substr equals to "o");
      string_free(substr);
      substr = string_substring(str, 0, 2);
      assert_that_charptr(substr equals to "ob");
      string_free(substr);
      substr = string_substring(str, 0, 3);
      assert_that_charptr(substr equals to "obl");
      string_free(substr);
      substr = string_substring(str, 0, 4);
      assert_that_charptr(substr equals to "obli");
      string_free(substr);
      substr = string_substring(str, 0, 5);
      assert_that_charptr(substr equals to "obliv");
      string_free(substr);
      substr = string_substring(str, 0, 6);
      assert_that_charptr(substr equals to "oblivi");
      string_free(substr);
      substr = string_substring(str, 0, 7);
      assert_that_charptr(substr equals to "oblivio");
      string_free(substr);
      substr = string_substring(str, 0, 8);
      assert_that_charptr(substr equals to "obliviou");
      string_free(substr);
      substr = string_substring(str, 0, 9);
      assert_that_charptr(substr equals to "oblivious");
      string_free(substr);
      substr = string_substring(str, 1, 2);
      assert_that_charptr(substr equals to "b");
      string_free(substr);
      substr = string_substring(str, 1, 3);
      assert_that_charptr(substr equals to "bl");
      string_free(substr);
      substr = string_substring(str, 1, 4);
      assert_that_charptr(substr equals to "bli");
      string_free(substr);
      substr = string_substring(str, 1, 5);
      assert_that_charptr(substr equals to "bliv");
      string_free(substr);
      substr = string_substring(str, 1, 6);
      assert_that_charptr(substr equals to "blivi");
      string_free(substr);
      substr = string_substring(str, 1, 7);
      assert_that_charptr(substr equals to "blivio");
      string_free(substr);
      substr = string_substring(str, 1, 8);
      assert_that_charptr(substr equals to "bliviou");
      string_free(substr);
      substr = string_substring(str, 1, 9);
      assert_that_charptr(substr equals to "blivious");
      string_free(substr);
      substr = string_substring(str, 2, 3);
      assert_that_charptr(substr equals to "l");
      string_free(substr);
      substr = string_substring(str, 2, 4);
      assert_that_charptr(substr equals to "li");
      string_free(substr);
      substr = string_substring(str, 2, 5);
      assert_that_charptr(substr equals to "liv");
      string_free(substr);
      substr = string_substring(str, 2, 6);
      assert_that_charptr(substr equals to "livi");
      string_free(substr);
      substr = string_substring(str, 2, 7);
      assert_that_charptr(substr equals to "livio");
      string_free(substr);
      substr = string_substring(str, 2, 8);
      assert_that_charptr(substr equals to "liviou");
      string_free(substr);
      substr = string_substring(str, 2, 9);
      assert_that_charptr(substr equals to "livious");
      string_free(substr);
      substr = string_substring(str, 3, 4);
      assert_that_charptr(substr equals to "i");
      string_free(substr);
      substr = string_substring(str, 3, 5);
      assert_that_charptr(substr equals to "iv");
      string_free(substr);
      substr = string_substring(str, 3, 6);
      assert_that_charptr(substr equals to "ivi");
      string_free(substr);
      substr = string_substring(str, 3, 7);
      assert_that_charptr(substr equals to "ivio");
      string_free(substr);
      substr = string_substring(str, 3, 8);
      assert_that_charptr(substr equals to "iviou");
      string_free(substr);
      substr = string_substring(str, 3, 9);
      assert_that_charptr(substr equals to "ivious");
      string_free(substr);
      substr = string_substring(str, 4, 5);
      assert_that_charptr(substr equals to "v");
      string_free(substr);
      substr = string_substring(str, 4, 6);
      assert_that_charptr(substr equals to "vi");
      string_free(substr);
      substr = string_substring(str, 4, 7);
      assert_that_charptr(substr equals to "vio");
      string_free(substr);
      substr = string_substring(str, 4, 8);
      assert_that_charptr(substr equals to "viou");
      string_free(substr);
      substr = string_substring(str, 4, 9);
      assert_that_charptr(substr equals to "vious");
      string_free(substr);
      substr = string_substring(str, 5, 6);
      assert_that_charptr(substr equals to "i");
      string_free(substr);
      substr = string_substring(str, 5, 7);
      assert_that_charptr(substr equals to "io");
      string_free(substr);
      substr = string_substring(str, 5, 8);
      assert_that_charptr(substr equals to "iou");
      string_free(substr);
      substr = string_substring(str, 5, 9);
      assert_that_charptr(substr equals to "ious");
      string_free(substr);
      substr = string_substring(str, 6, 7);
      assert_that_charptr(substr equals to "o");
      string_free(substr);
      substr = string_substring(str, 6, 8);
      assert_that_charptr(substr equals to "ou");
      string_free(substr);
      substr = string_substring(str, 6, 9);
      assert_that_charptr(substr equals to "ous");
      string_free(substr);
      substr = string_substring(str, 7, 8);
      assert_that_charptr(substr equals to "u");
      string_free(substr);
      substr = string_substring(str, 7, 9);
      assert_that_charptr(substr equals to "us");
      string_free(substr);
      substr = string_substring(str, 8, 9);
      assert_that_charptr(substr equals to "s");
      string_free(substr);
      substr = string_substring(str, 0, 3);
      assert_that_charptr(substr equals to "obl");
      string_free(substr);
      substr = string_substring(str, 1, 4);
      assert_that_charptr(substr equals to "bli");
      string_free(substr);
      substr = string_substring(str, 2, 5);
      assert_that_charptr(substr equals to "liv");
      string_free(substr);
      substr = string_substring(str, 3, 6);
      assert_that_charptr(substr equals to "ivi");
      string_free(substr);
      substr = string_substring(str, 4, 7);
      assert_that_charptr(substr equals to "vio");
      string_free(substr);
      substr = string_substring(str, 5, 8);
      assert_that_charptr(substr equals to "iou");
      string_free(substr);
      substr = string_substring(str, 6, 9);
      assert_that_charptr(substr equals to "ous");
      string_free(substr);
      substr = string_substring(str, -9, -8);
      assert_that_charptr(substr equals to "o");
      string_free(substr);
      substr = string_substring(str, -9, -7);
      assert_that_charptr(substr equals to "ob");
      string_free(substr);
      substr = string_substring(str, -9, -6);
      assert_that_charptr(substr equals to "obl");
      string_free(substr);
      substr = string_substring(str, -9, -5);
      assert_that_charptr(substr equals to "obli");
      string_free(substr);
      substr = string_substring(str, -9, -4);
      assert_that_charptr(substr equals to "obliv");
      string_free(substr);
      substr = string_substring(str, -9, -3);
      assert_that_charptr(substr equals to "oblivi");
      string_free(substr);
      substr = string_substring(str, -9, -2);
      assert_that_charptr(substr equals to "oblivio");
      string_free(substr);
      substr = string_substring(str, -9, -1);
      assert_that_charptr(substr equals to "obliviou");
      string_free(substr);
      substr = string_substring(str, -9, 0);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -9, 1);
      assert_that_charptr(substr equals to "o");
      string_free(substr);
      substr = string_substring(str, -9, 2);
      assert_that_charptr(substr equals to "ob");
      string_free(substr);
      substr = string_substring(str, -9, 3);
      assert_that_charptr(substr equals to "obl");
      string_free(substr);
      substr = string_substring(str, -9, 4);
      assert_that_charptr(substr equals to "obli");
      string_free(substr);
      substr = string_substring(str, -9, 5);
      assert_that_charptr(substr equals to "obliv");
      string_free(substr);
      substr = string_substring(str, -9, 6);
      assert_that_charptr(substr equals to "oblivi");
      string_free(substr);
      substr = string_substring(str, -9, 7);
      assert_that_charptr(substr equals to "oblivio");
      string_free(substr);
      substr = string_substring(str, -9, 8);
      assert_that_charptr(substr equals to "obliviou");
      string_free(substr);
      substr = string_substring(str, -9, 9);
      assert_that_charptr(substr equals to "oblivious");
      string_free(substr);
      substr = string_substring(str, -8, -7);
      assert_that_charptr(substr equals to "b");
      string_free(substr);
      substr = string_substring(str, -8, -6);
      assert_that_charptr(substr equals to "bl");
      string_free(substr);
      substr = string_substring(str, -8, -5);
      assert_that_charptr(substr equals to "bli");
      string_free(substr);
      substr = string_substring(str, -8, -4);
      assert_that_charptr(substr equals to "bliv");
      string_free(substr);
      substr = string_substring(str, -8, -3);
      assert_that_charptr(substr equals to "blivi");
      string_free(substr);
      substr = string_substring(str, -8, -2);
      assert_that_charptr(substr equals to "blivio");
      string_free(substr);
      substr = string_substring(str, -8, -1);
      assert_that_charptr(substr equals to "bliviou");
      string_free(substr);
      substr = string_substring(str, -8, 0);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -8, 1);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -8, 2);
      assert_that_charptr(substr equals to "b");
      string_free(substr);
      substr = string_substring(str, -8, 3);
      assert_that_charptr(substr equals to "bl");
      string_free(substr);
      substr = string_substring(str, -8, 4);
      assert_that_charptr(substr equals to "bli");
      string_free(substr);
      substr = string_substring(str, -8, 5);
      assert_that_charptr(substr equals to "bliv");
      string_free(substr);
      substr = string_substring(str, -8, 6);
      assert_that_charptr(substr equals to "blivi");
      string_free(substr);
      substr = string_substring(str, -8, 7);
      assert_that_charptr(substr equals to "blivio");
      string_free(substr);
      substr = string_substring(str, -8, 8);
      assert_that_charptr(substr equals to "bliviou");
      string_free(substr);
      substr = string_substring(str, -8, 9);
      assert_that_charptr(substr equals to "blivious");
      string_free(substr);
      substr = string_substring(str, -7, -6);
      assert_that_charptr(substr equals to "l");
      string_free(substr);
      substr = string_substring(str, -7, -5);
      assert_that_charptr(substr equals to "li");
      string_free(substr);
      substr = string_substring(str, -7, -4);
      assert_that_charptr(substr equals to "liv");
      string_free(substr);
      substr = string_substring(str, -7, -3);
      assert_that_charptr(substr equals to "livi");
      string_free(substr);
      substr = string_substring(str, -7, -2);
      assert_that_charptr(substr equals to "livio");
      string_free(substr);
      substr = string_substring(str, -7, -1);
      assert_that_charptr(substr equals to "liviou");
      string_free(substr);
      substr = string_substring(str, -7, 0);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -7, 1);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -7, 2);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -7, 3);
      assert_that_charptr(substr equals to "l");
      string_free(substr);
      substr = string_substring(str, -7, 4);
      assert_that_charptr(substr equals to "li");
      string_free(substr);
      substr = string_substring(str, -7, 5);
      assert_that_charptr(substr equals to "liv");
      string_free(substr);
      substr = string_substring(str, -7, 6);
      assert_that_charptr(substr equals to "livi");
      string_free(substr);
      substr = string_substring(str, -7, 7);
      assert_that_charptr(substr equals to "livio");
      string_free(substr);
      substr = string_substring(str, -7, 8);
      assert_that_charptr(substr equals to "liviou");
      string_free(substr);
      substr = string_substring(str, -7, 9);
      assert_that_charptr(substr equals to "livious");
      string_free(substr);
      substr = string_substring(str, -6, -5);
      assert_that_charptr(substr equals to "i");
      string_free(substr);
      substr = string_substring(str, -6, -4);
      assert_that_charptr(substr equals to "iv");
      string_free(substr);
      substr = string_substring(str, -6, -3);
      assert_that_charptr(substr equals to "ivi");
      string_free(substr);
      substr = string_substring(str, -6, -2);
      assert_that_charptr(substr equals to "ivio");
      string_free(substr);
      substr = string_substring(str, -6, -1);
      assert_that_charptr(substr equals to "iviou");
      string_free(substr);
      substr = string_substring(str, -6, 0);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -6, 1);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -6, 2);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -6, 3);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -6, 4);
      assert_that_charptr(substr equals to "i");
      string_free(substr);
      substr = string_substring(str, -6, 5);
      assert_that_charptr(substr equals to "iv");
      string_free(substr);
      substr = string_substring(str, -6, 6);
      assert_that_charptr(substr equals to "ivi");
      string_free(substr);
      substr = string_substring(str, -6, 7);
      assert_that_charptr(substr equals to "ivio");
      string_free(substr);
      substr = string_substring(str, -6, 8);
      assert_that_charptr(substr equals to "iviou");
      string_free(substr);
      substr = string_substring(str, -6, 9);
      assert_that_charptr(substr equals to "ivious");
      string_free(substr);
      substr = string_substring(str, -5, -4);
      assert_that_charptr(substr equals to "v");
      string_free(substr);
      substr = string_substring(str, -5, -3);
      assert_that_charptr(substr equals to "vi");
      string_free(substr);
      substr = string_substring(str, -5, -2);
      assert_that_charptr(substr equals to "vio");
      string_free(substr);
      substr = string_substring(str, -5, -1);
      assert_that_charptr(substr equals to "viou");
      string_free(substr);
      substr = string_substring(str, -5, 0);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -5, 1);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -5, 2);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -5, 3);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -5, 4);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -5, 5);
      assert_that_charptr(substr equals to "v");
      string_free(substr);
      substr = string_substring(str, -5, 6);
      assert_that_charptr(substr equals to "vi");
      string_free(substr);
      substr = string_substring(str, -5, 7);
      assert_that_charptr(substr equals to "vio");
      string_free(substr);
      substr = string_substring(str, -5, 8);
      assert_that_charptr(substr equals to "viou");
      string_free(substr);
      substr = string_substring(str, -5, 9);
      assert_that_charptr(substr equals to "vious");
      string_free(substr);
      substr = string_substring(str, -4, -3);
      assert_that_charptr(substr equals to "i");
      string_free(substr);
      substr = string_substring(str, -4, -2);
      assert_that_charptr(substr equals to "io");
      string_free(substr);
      substr = string_substring(str, -4, -1);
      assert_that_charptr(substr equals to "iou");
      string_free(substr);
      substr = string_substring(str, -4, 0);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -4, 1);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -4, 2);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -4, 3);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -4, 4);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -4, 5);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -4, 6);
      assert_that_charptr(substr equals to "i");
      string_free(substr);
      substr = string_substring(str, -4, 7);
      assert_that_charptr(substr equals to "io");
      string_free(substr);
      substr = string_substring(str, -4, 8);
      assert_that_charptr(substr equals to "iou");
      string_free(substr);
      substr = string_substring(str, -4, 9);
      assert_that_charptr(substr equals to "ious");
      string_free(substr);
      substr = string_substring(str, -3, -2);
      assert_that_charptr(substr equals to "o");
      string_free(substr);
      substr = string_substring(str, -3, -1);
      assert_that_charptr(substr equals to "ou");
      string_free(substr);
      substr = string_substring(str, -3, 0);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -3, 1);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -3, 2);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -3, 3);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -3, 4);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -3, 5);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -3, 6);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -3, 7);
      assert_that_charptr(substr equals to "o");
      string_free(substr);
      substr = string_substring(str, -3, 8);
      assert_that_charptr(substr equals to "ou");
      string_free(substr);
      substr = string_substring(str, -3, 9);
      assert_that_charptr(substr equals to "ous");
      string_free(substr);
      substr = string_substring(str, -2, -1);
      assert_that_charptr(substr equals to "u");
      string_free(substr);
      substr = string_substring(str, -2, 0);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -2, 1);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -2, 2);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -2, 3);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -2, 4);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -2, 5);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -2, 6);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -2, 7);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -2, 8);
      assert_that_charptr(substr equals to "u");
      string_free(substr);
      substr = string_substring(str, -2, 9);
      assert_that_charptr(substr equals to "us");
      string_free(substr);
      substr = string_substring(str, -1, 0);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -1, 1);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -1, 2);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -1, 3);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -1, 4);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -1, 5);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -1, 6);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -1, 7);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -1, 8);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, -1, 9);
      assert_that_charptr(substr equals to "s");
      string_free(substr);
      substr = string_substring(str, 0, -8);
      assert_that_charptr(substr equals to "o");
      string_free(substr);
      substr = string_substring(str, 0, -7);
      assert_that_charptr(substr equals to "ob");
      string_free(substr);
      substr = string_substring(str, 0, -6);
      assert_that_charptr(substr equals to "obl");
      string_free(substr);
      substr = string_substring(str, 0, -5);
      assert_that_charptr(substr equals to "obli");
      string_free(substr);
      substr = string_substring(str, 0, -4);
      assert_that_charptr(substr equals to "obliv");
      string_free(substr);
      substr = string_substring(str, 0, -3);
      assert_that_charptr(substr equals to "oblivi");
      string_free(substr);
      substr = string_substring(str, 0, -2);
      assert_that_charptr(substr equals to "oblivio");
      string_free(substr);
      substr = string_substring(str, 0, -1);
      assert_that_charptr(substr equals to "obliviou");
      string_free(substr);
      substr = string_substring(str, 0, 0);
      assert_that_charptr(substr equals to "");
      string_free(substr);
      substr = string_substring(str, 0, 1);
      assert_that_charptr(substr equals to "o");
      string_free(substr);
      substr = string_substring(str, 0, 2);
      assert_that_charptr(substr equals to "ob");
      string_free(substr);
      substr = string_substring(str, 0, 3);
      assert_that_charptr(substr equals to "obl");
      string_free(substr);
      substr = string_substring(str, 0, 4);
      assert_that_charptr(substr equals to "obli");
      string_free(substr);
      substr = string_substring(str, 0, 5);
      assert_that_charptr(substr equals to "obliv");
      string_free(substr);
      substr = string_substring(str, 0, 6);
      assert_that_charptr(substr equals to "oblivi");
      string_free(substr);
      substr = string_substring(str, 0, 7);
      assert_that_charptr(substr equals to "oblivio");
      string_free(substr);
      substr = string_substring(str, 0, 8);
      assert_that_charptr(substr equals to "obliviou");
      string_free(substr);
      substr = string_substring(str, 0, 9);
      assert_that_charptr(substr equals to "oblivious");
      string_free(substr);
      substr = string_substring(str, 1, -7);
      assert_that_charptr(substr equals to "b");
      string_free(substr);
      substr = string_substring(str, 1, -6);
      assert_that_charptr(substr equals to "bl");
      string_free(substr);
      substr = string_substring(str, 1, -5);
      assert_that_charptr(substr equals to "bli");
      string_free(substr);
      substr = string_substring(str, 1, -4);
      assert_that_charptr(substr equals to "bliv");
      string_free(substr);
      substr = string_substring(str, 1, -3);
      assert_that_charptr(substr equals to "blivi");
      string_free(substr);
      substr = string_substring(str, 1, -2);
      assert_that_charptr(substr equals to "blivio");
      string_free(substr);
      substr = string_substring(str, 1, -1);
      assert_that_charptr(substr equals to "bliviou");
      string_free(substr);

      string_free(str);
    });
  });
})

#endif
